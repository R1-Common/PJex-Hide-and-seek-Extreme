local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Hide And Seek Extreme by PJex",
   LoadingTitle = "PJex Exploits",
   LoadingSubtitle = "Made By PJex",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "PJexExploitsGamesHub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Execution",
   Content = "Thank You For Using PJexExploits",
   Duration = 4.2,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "PJex Is So Cool",
         Callback = function()
         print("PJex Is So Cool")
      end
   },
},
})

local Button = MainTab:CreateButton({
   Name = "Collect All Coins",
   Callback = function()
   -- Client-side script (LocalScript)
local humanoid = game:GetService("Players").LocalPlayer.Character:WaitForChild("Humanoid")
local creditsModel = game.Workspace:WaitForChild("GameObjects")

-- Store the humanoid's original position
local originalPosition = humanoid.RootPart.CFrame

-- Teleport to each credit
local parts = creditsModel:GetDescendants()
for _, part in ipairs(parts) do
    if part:IsA("BasePart") then
        humanoid.RootPart.CFrame = part.CFrame
        wait() -- Adjust the wait duration if needed
    end
end

-- Teleport back to the original position
humanoid.RootPart.CFrame = originalPosition
   end,
})

local Button = MainTab:CreateButton({
   Name = "Infinte Jump",
   Callback = function(InfiniteJumpEnabled)
    local InfiniteJumpEnabled = true
        game:GetService("UserInputService").JumpRequest:connect(function()
            if InfiniteJumpEnabled then
                game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
            end
        end)
   end,
})

local ESP = Window:CreateTab("ESP", nil) -- Title, Image
local ESPSection = ESP:CreateSection("ESP")

local Button = ESP:CreateButton({
   Name = "ESP",
   Callback = function()
   local gui = Instance.new("BillboardGui");
gui.Name = "";
gui.AlwaysOnTop = true;
gui.LightInfluence = 0;
gui.Size = UDim2.new(1.75, 0, 1.75, 0);
local frame = Instance.new("Frame", gui);
frame.BackgroundColor3 = Color3.fromRGB(170, 0, 0);
frame.Size = UDim2.new(1, 0, 1, 0);
frame.BorderSizePixel = 4;
frame.BorderColor3 = Color3.fromRGB(0, 0, 0);
local gi = gui:Clone();
local body = frame:Clone();
body.Parent = gi;
body.BackgroundColor3 = Color3.fromRGB(0, 170, 170);
 
for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= game:GetService("Players").LocalPlayer.Name and v.Character and v.Character:FindFirstChild("Head") then
        gui:Clone().Parent = v.Character.Head;
    end
end
   end,
})		

local Button = MainTab:CreateButton({
   Name = "IT Credit Farm/Hiding Spot (might have to wait a bit for the players to spawn)",
   Callback = function()
   local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local teleportPosition = Vector3.new(330, 158, -33)

local function teleportToPosition(position)
    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(position)
end

teleportToPosition(teleportPosition)
   end,
})

local Button = MainTab:CreateButton({
   Name = "IT Player Farm",
   Callback = function()
   local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to teleport to a player
local function teleportToPlayer(player)
    local character = player.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position)
        end
    end
end

-- Teleport to each player in the game
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        teleportToPlayer(player)
        wait(0.01) -- Adjust this delay as needed to control the teleport speed
    end
end
   end,
})

local PlayerTab = Window:CreateTab("Player", nil) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Player")

local Slider = PlayerTab:CreateSlider({
   Name = "Walkspeed",
   Range = {16, 250},
   Increment = 10,
   Suffix = "WalkSpeed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v+)
  game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
   end,
})

local Slider = PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 10,
    Suffix = "JumpPower",
    CurrentValue = 10,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(v)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = v
    end,
 })

local Toggle = MainTab:CreateToggle({
   Name = "NoClip",
   CurrentValue = false,
   Flag = "Toggle69", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(NoCLIPHACK)
   local runservice = game:GetService("RunService")

local player = game:GetService("Players").LocalPlayer
runservice.Stepped:Connect(function()
    for i,v in pairs(player.Character:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = false
        end
    end
end) = NoCLIPHACK
   end,
})
